using FluentAssertions;
using Xunit;

namespace GrpcInjectionTests
{
    public class GeneratorTest:IClassFixture<TestCompilationFixture>
    {
        private readonly TestCompilationFixture fixture;

        public GeneratorTest(TestCompilationFixture fixture) => this.fixture = fixture;

        [Fact]
        public void GeneratedCodeWithoutCode()
        {
            var source = @"";
            var expected = @"// <auto-generated />

    internal  class GrpcServiceAttribute: System.Attribute
    {

    }

    internal  class GrpcInterceptorAttribute: System.Attribute
    {

    }
";
           var output =  fixture.GetCompilationOutput(source);


          output.Should().Be(expected);

        }

        [Fact]
        public void GeneratedCodeWithAddGrpcInject()
        {
            var source = @"var builder = WebApplication.CreateBuilder(args);

builder.Services.AddGrpcInject();

var app = builder.Build();

app.Run();";
            var expected = @"// <auto-generated />

    internal  class GrpcServiceAttribute: System.Attribute
    {

    }

    internal  class GrpcInterceptorAttribute: System.Attribute
    {

    }
";
            var output = fixture.GetCompilationOutput(source);


            output.Should().Be(expected);

        }

        [Fact]
        public void GeneratedCodeWithUseGrpcInject()
        {
            var source = @"var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

app.UseGrpcInject();

app.Run();";
            var expected = @"// <auto-generated />

    internal  class GrpcServiceAttribute: System.Attribute
    {

    }

    internal  class GrpcInterceptorAttribute: System.Attribute
    {

    }
";
            var output = fixture.GetCompilationOutput(source);


            output.Should().Be(expected);

        }

        [Fact]
        public void GeneratedCodeWithAddGrpcInjectAndUseGrpcInject()
        {
            var source = @"var builder = WebApplication.CreateBuilder(args);

builder.Services.AddGrpcInject();

var app = builder.Build();

app.UseGrpcInject();

app.Run();
";
            var expected = @"// <auto-generated /> 
                public static class GrpcInjectExtension
                {
                    public static void AddGrpcInject(this IServiceCollection services)
                    {
                        services.AddGrpc();

                    }
                    public static void UseGrpcInject(this IApplicationBuilder app)
                    {
                        
                    }
                }";
            var output = fixture.GetCompilationOutput(source);


            output.Should().Be(expected);
        }

        [Fact]
        public void GeneratedCodeWithGrpcService()
        {
            var source = @"var builder = WebApplication.CreateBuilder(args);

builder.Services.AddGrpcInject();

var app = builder.Build();

app.UseGrpcInject();

app.Run();

[GrpcService]
class MyService
{
    
}
";
            var expected = @"// <auto-generated /> 
                public static class GrpcInjectExtension
                {
                    public static void AddGrpcInject(this IServiceCollection services)
                    {
                        services.AddGrpc();

                    }
                    public static void UseGrpcInject(this IApplicationBuilder app)
                    {
                        app.UseRouting();
                        app.UseEndpoints(endpoints =>{
                           endpoints.MapGrpcService<MyService>();
                        });

                    }
                }";
            var output = fixture.GetCompilationOutput(source);


            output.Should().Be(expected);
        }

        [Fact]
        public void GeneratedCodeWithGrpcInterceptor()
        {
            var source = @"var builder = WebApplication.CreateBuilder(args);

builder.Services.AddGrpcInject();

var app = builder.Build();

app.UseGrpcInject();

app.Run();

[GrpcInterceptor]
class MyInterceptor
{
    
}
";
            var expected = @"// <auto-generated /> 
                public static class GrpcInjectExtension
                {
                    public static void AddGrpcInject(this IServiceCollection services)
                    {
                        services.AddGrpc(options=>{
                           options.Interceptors.Add<MyInterceptor>();
                        });

                    }
                    public static void UseGrpcInject(this IApplicationBuilder app)
                    {
                        
                    }
                }";
            var output = fixture.GetCompilationOutput(source);


            output.Should().Be(expected);
        }

        [Fact]
        public void GeneratedCodeWithGrpcInterceptorAndGrpcService()
        {
            var source = @"var builder = WebApplication.CreateBuilder(args);

builder.Services.AddGrpcInject();

var app = builder.Build();

app.UseGrpcInject();

app.Run();

[GrpcService]
public class MyService{}

[GrpcInterceptor]
class MyInterceptor{}
";
            var expected = @"// <auto-generated /> 
                public static class GrpcInjectExtension
                {
                    public static void AddGrpcInject(this IServiceCollection services)
                    {
                        services.AddGrpc(options=>{
                           options.Interceptors.Add<MyInterceptor>();
                        });

                    }
                    public static void UseGrpcInject(this IApplicationBuilder app)
                    {
                        app.UseRouting();
                        app.UseEndpoints(endpoints =>{
                           endpoints.MapGrpcService<MyService>();
                        });

                    }
                }";
            var output = fixture.GetCompilationOutput(source);


            output.Should().Be(expected);
        }

        [Fact]
        public void GeneratedCodeWithGrpcGrpcServiceWithNamespace()
        {
            var source = @"
namespace MyApp;

public class MyStartUp {
    public void AddGrpCollection(this IServiceCollection services)=>services.AddGrpcInject();

   public void UseGrpcWebApplication(this WebApplication app)=>app.UseGrpcInject();
}


[GrpcService]
public class MyService{}

";
            var expected = @"// <auto-generated /> 
                public static class GrpcInjectExtension
                {
                    public static void AddGrpcInject(this IServiceCollection services)
                    {
                        services.AddGrpc();

                    }
                    public static void UseGrpcInject(this IApplicationBuilder app)
                    {
                        app.UseRouting();
                        app.UseEndpoints(endpoints =>{
                           endpoints.MapGrpcService<MyApp.MyService>();
                        });

                    }
                }";
            var output = fixture.GetCompilationOutput(source);


            output.Should().Be(expected);
        }

        [Fact]
        public void GeneratedCodeWithGrpcGrpcServiceAndGrpcInterceptorWithNamespace()
        {
            var source = @"
namespace MyApp;

public class MyStartUp {
    public void AddGrpCollection(this IServiceCollection services)=>services.AddGrpcInject();

   public void UseGrpcWebApplication(this WebApplication app)=>app.UseGrpcInject();
}


[GrpcService]
public class MyService{}

[GrpcInterceptor]
public class MyInterceptor{}

";
            var expected = @"// <auto-generated /> 
                public static class GrpcInjectExtension
                {
                    public static void AddGrpcInject(this IServiceCollection services)
                    {
                        services.AddGrpc(options=>{
                           options.Interceptors.Add<MyApp.MyInterceptor>();
                        });

                    }
                    public static void UseGrpcInject(this IApplicationBuilder app)
                    {
                        app.UseRouting();
                        app.UseEndpoints(endpoints =>{
                           endpoints.MapGrpcService<MyApp.MyService>();
                        });

                    }
                }";
            var output = fixture.GetCompilationOutput(source);


            output.Should().Be(expected);
        }

        [Fact]
        public void GeneratedCodeWithGrpcGrpcInterceptorWithNamespace()
        {
            var source = @"

public class MyStartUp {
    public void AddGrpCollection(this IServiceCollection services)=>services.AddGrpcInject();

   public void UseGrpcWebApplication(this WebApplication app)=>app.UseGrpcInject();
}

namespace MyApp;
public class MyGrpcServices
{

    [GrpcInterceptor]
    public class MyInterceptor{}
}
";
            var expected = @"// <auto-generated /> 
                public static class GrpcInjectExtension
                {
                    public static void AddGrpcInject(this IServiceCollection services)
                    {
                        services.AddGrpc(options=>{
                           options.Interceptors.Add<MyApp.MyGrpcServices.MyInterceptor>();
                        });

                    }
                    public static void UseGrpcInject(this IApplicationBuilder app)
                    {
                        
                    }
                }";
            var output = fixture.GetCompilationOutput(source);


            output.Should().Be(expected);
        }
    }
}
