using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace GrpcInjection
{

    /*using GrpcInjectionExample.Services;

namespace GrpcInjection
{
    public static class GrpcInjectExtension
    {
        public static void AddGrpcInject(this IServiceCollection services)
        {
            services.AddGrpc();
        }

        public static void UseGrpcInject(this IApplicationBuilder app)
        {
            app.UseRouting();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapGrpcService<GreeterService>();
            });
        }
    }
}*/
    [Generator]
    public class Generator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var compilation = context.Compilation;

            if (context.SyntaxReceiver is GrpcInjectionReceiver receiver)
            {
                if (receiver.existsConfigAddGrpc == false || receiver.existsConfigUseGrpc == false)
                    return;

                var addInterceptor = new StringBuilder();
               


                if (!receiver.myGrpcInterceptorAttributes.Any())
                    addInterceptor.AppendLine("services.AddGrpc();");
                else
                {
                    addInterceptor.AppendLine("services.AddGrpc(options=>{");

                    foreach (var attributesTypes in receiver.myGrpcInterceptorAttributes)
                    {

                        var semantic = compilation.GetSemanticModel(attributesTypes.SyntaxTree);
                        var symbol = semantic.GetDeclaredSymbol(attributesTypes);


                        addInterceptor.AppendLine($"                           options.Interceptors.Add<{symbol!.OriginalDefinition.ToDisplayString()}>();");

                    }
                    addInterceptor.AppendLine("                        });");

                }
                var addServices = new StringBuilder();
                if (receiver.myGrpcAttributes.Any())
                {
                    addServices.AppendLine("app.UseRouting();");

                    addServices.AppendLine("                        app.UseEndpoints(endpoints =>{");

                    foreach (var attributesTypes in receiver.myGrpcAttributes)
                    {

                        var semantic = compilation.GetSemanticModel(attributesTypes.SyntaxTree);
                        var symbol = semantic.GetDeclaredSymbol(attributesTypes);


                        addServices.AppendLine($"                           endpoints.MapGrpcService<{symbol!.OriginalDefinition.ToDisplayString()}>();");

                    }
                    addServices.AppendLine("                        });");

                }
                var code = $@"// <auto-generated /> 
                public static class GrpcInjectExtension
                {{
                    public static void AddGrpcInject(this IServiceCollection services)
                    {{
                        {addInterceptor}
                    }}
                    public static void UseGrpcInject(this IApplicationBuilder app)
                    {{
                        {addServices}
                    }}
                }}";


                context.AddSource("GrpcInjectExtension.Generated.cs", SourceText.From(code.ToString(), Encoding.UTF8));
            }
        }
        public void Initialize(GeneratorInitializationContext context)
        {
            const string attributeClass = @"// <auto-generated />

    internal  class GrpcServiceAttribute: System.Attribute
    {

    }

    internal  class GrpcInterceptorAttribute: System.Attribute
    {

    }
";
            context.RegisterForPostInitialization(context => context.AddSource("GrpcInjectAttribute.Generated.cs", SourceText.From(attributeClass, Encoding.UTF8)));
            context.RegisterForSyntaxNotifications(() => new GrpcInjectionReceiver());
        }

    }

    internal class GrpcInjectionReceiver : ISyntaxReceiver
    {
        public List<TypeDeclarationSyntax> myGrpcAttributes { get; } = new();
        public List<TypeDeclarationSyntax> myGrpcInterceptorAttributes { get; } = new();
        public bool existsConfigAddGrpc { get; private set; } = false;
        public bool existsConfigUseGrpc { get; private set; } = false;


        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {

            if (syntaxNode is TypeDeclarationSyntax typeDeclaration)
            {
                foreach (var attributeList in typeDeclaration.AttributeLists)
                {
                    foreach (var attribute in attributeList.Attributes)
                    {

                        if ("GrpcService".Equals(attribute.Name.ToString()) || "GrpcServiceAttribute".Equals(attribute.Name.ToString()))
                            myGrpcAttributes.Add(typeDeclaration);

                        if ("GrpcInterceptor".Equals(attribute.Name.ToString()) || "GrpcInterceptorAttribute".Equals(attribute.Name.ToString()))
                            myGrpcInterceptorAttributes.Add(typeDeclaration);

                    }
                }
            }

            if (syntaxNode is InvocationExpressionSyntax
                {
                    Expression: MemberAccessExpressionSyntax
                    {
                        Name:
                        {
                            Identifier:
                            {
                                ValueText: "AddGrpcInject"
                            }
                        }
                    }
                })
            {
                existsConfigAddGrpc = true;
            }

            if (syntaxNode is InvocationExpressionSyntax
                {
                    Expression: MemberAccessExpressionSyntax
                    {
                        Name:
                        {
                            Identifier:
                            {
                                ValueText: "UseGrpcInject"
                            }
                        }
                    }
                })
            {
                existsConfigUseGrpc = true;
            }
        }
    }
}
